plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.michalz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainersVersion', "1.15.3")
}

dependencies {
	//AWS
    implementation platform 'software.amazon.awssdk:bom:2.10.32'

	//Spring
	implementation 'org.springframework.boot:spring-boot-starter'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	//Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'

	integrationTestAnnotationProcessor 'org.projectlombok:lombok'

    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'

}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/intTest/java')
        }
        resources.srcDir file('src/intTest/resources')
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()

    setTestClassesDirs(sourceSets.integrationTest.output)
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter assemble

    testLogging {
        events "passed", "skipped", "failed"
        showStackTraces true
        showCauses true
        showExceptions true
        showStandardStreams true
        exceptionFormat "full"

    }
}

check.dependsOn(integrationTest)

test {
    useJUnitPlatform()
}
